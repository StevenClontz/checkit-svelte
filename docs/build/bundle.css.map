{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Exercise.svelte",
    "Pagination.svelte",
    "Bank.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Nav from './components/Nav.svelte';\nimport { onMount } from 'svelte';\nimport { banks } from './stores/banks';\nimport Router from 'svelte-spa-router';\nimport { routes } from './routes';\nlet loading = true;\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    const res = yield fetch(`./bank.json`);\n    let _0 = yield res.json();\n    let _1 = Object.assign({}, _0);\n    let _2 = Object.assign({}, _0);\n    _1.title = \"Foobar\";\n    _1.slug = \"foo\";\n    _1.outcomes = _1.outcomes.slice(2, 7);\n    _2.title = \"Hello Baz\";\n    _2.slug = \"baz\";\n    _2.outcomes = _2.outcomes.slice(3, 8);\n    banks.set([_0, _1, _2]);\n    loading = false;\n}));\n</script>\n\n\n{#if loading}\n    <Nav/>\n    <div class=\"text-center\">\n        <h1 class=\"display-4\">Loading ☑️It...</h1>\n    </div>\n{:else}\n    <Router {routes}/>\n{/if}\n\n<style>\n    h1 { margin-top: 1em; }\n</style>\n",
    "<script lang=\"ts\">import katex from 'katex';\nimport { afterUpdate } from 'svelte';\n;\nimport { instructor } from '../stores/instructor';\nimport { Nav, NavItem, NavLink, Row, Col } from 'sveltestrap';\nexport let exercise;\nexport let hiddenAnswer;\nlet inlineMathRe = /\\\\\\((.*?)\\\\\\)/gs;\nlet displayMathRe = /\\\\\\[(.*?)\\\\\\]/gs;\nconst parseMath = (html) => {\n    return html.replace(inlineMathRe, (_, tex) => katex.renderToString(tex, {\n        'displayMode': false,\n        'throwOnError': false,\n    })).replace(displayMathRe, (_, tex) => katex.renderToString(tex, {\n        'displayMode': true,\n        'throwOnError': false,\n    }));\n};\nlet exerciseDiv;\nconst decorateAnswer = () => {\n    if (exerciseDiv) {\n        for (let e of exerciseDiv.getElementsByClassName(\"exercise-answer\")) {\n            e.classList.add(\"alert\");\n            e.classList.add(\"alert-info\");\n            if (hiddenAnswer) {\n                e.classList.add(\"d-none\");\n            }\n            else {\n                e.classList.remove(\"d-none\");\n            }\n        }\n    }\n};\nafterUpdate(decorateAnswer);\nconst modes = ['display', 'html', 'tex', 'pretext'];\nconst modeLabels = ['Display', 'HTML source', 'LaTeX source', 'PreTeXt source'];\nlet mode = \"display\";\nconst changeMode = (m) => (e) => {\n    e.preventDefault();\n    mode = m;\n};\n</script>\n\n{#if $instructor.enabled}\n    <div class=\"navtabs\">\n        <Nav tabs>\n            {#each modes as m,i}\n                <NavItem>\n                    <NavLink active={mode==m} on:click={changeMode(m)} href=\"#/\">{modeLabels[i]}</NavLink>\n                </NavItem>\n            {/each}\n        </Nav>\n    </div>\n{:else}\n    <hr/>\n{/if}\n\n<Row>\n    <Col sm={{ size: 10, offset: 1 }}>\n        {#if mode == \"display\"}\n            <div bind:this={exerciseDiv}>{@html parseMath(exercise.html)}</div>\n        {:else if mode == \"html\"}\n            <pre class=\"pre-scrollable\"><code>{exercise.html}</code></pre>\n        {:else if mode == \"tex\"}\n            <pre class=\"pre-scrollable\"><code>{exercise.tex}</code></pre>\n        {:else if mode == \"pretext\"}\n            <pre class=\"pre-scrollable\"><code>{exercise.pretext}</code></pre>\n        {:else}\n            Invalid mode.\n        {/if}\n    </Col>\n</Row>\n\n<style>\n    pre {\n        border: 1px #ddd solid;\n        background-color: #eee;\n        padding: 4px;\n        border-radius: 5px;\n    }\n    .navtabs {\n        margin-bottom: 1em;\n    }\n</style>",
    "<script lang=\"ts\">import { Pagination, PaginationItem, PaginationLink } from 'sveltestrap';\nexport let page;\nexport let pages;\nexport let label = undefined;\nexport let keyboardControl = false;\nconst pageRange = (p) => {\n    let start = Math.max(0, Math.min(p - 2, pages - 5));\n    let end = Math.min(pages, start + 5);\n    return Array.from({ length: end - start }, (_, key) => start + key);\n};\nconst setPage = (p) => (e) => {\n    e.preventDefault();\n    page = p;\n};\nconst handleKeydown = (e) => {\n    if (keyboardControl) {\n        if (e.key === \"ArrowLeft\") {\n            page = Math.max(0, page - 1);\n        }\n        else if (e.key === \"ArrowRight\") {\n            page = Math.min(pages - 1, page + 1);\n        }\n    }\n};\n</script>\n\n\n<svelte:window on:keydown={handleKeydown}/>\n\n<div class=\"pagination\">\n    <Pagination ariaLabel={label}>\n        {#if label}\n        <PaginationItem disabled>\n            <PaginationLink>{label}</PaginationLink>\n        </PaginationItem>\n        {/if}\n        <PaginationItem disabled={page==0}>\n            <PaginationLink first on:click={setPage(0)} />\n        </PaginationItem>\n        <PaginationItem disabled={page==0}>\n            <PaginationLink previous on:click={setPage(page-1)} />\n        </PaginationItem>\n        {#each pageRange(page) as p}\n            <PaginationItem active={page==p}>\n                <PaginationLink on:click={setPage(p)}>{p+1}</PaginationLink>\n            </PaginationItem>\n        {/each}\n        <PaginationItem disabled={page==pages-1}>\n            <PaginationLink next on:click={setPage(page+1)} />\n        </PaginationItem>\n        <PaginationItem disabled={page==pages-1}>\n            <PaginationLink last on:click={setPage(pages-1)} />\n        </PaginationItem>\n    </Pagination>\n</div>\n\n<style>\n    .pagination {\n        overflow-x: scroll;\n    }\n</style>\n",
    "<script lang=\"ts\">;\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Alert, } from 'sveltestrap';\nimport Nav from '../components/Nav.svelte';\nimport OutcomeDropdown from '../utils/OutcomeDropdown.svelte';\nimport { banks } from '../stores/banks';\n;\nexport let params;\n$: bank = $banks.find((b) => b.slug == params.bankSlug);\nlet outcome = undefined;\n$: if (params.outcomeSlug) {\n    outcome = bank.outcomes.find((o) => o.slug == params.outcomeSlug);\n}\n</script>\n\n<Nav {bank}/>\n\n<main>\n    <Container>\n        <h1>{bank.title}</h1>\n        {#if bank.outcomes}\n            <p>\n                <OutcomeDropdown {bank} {outcome}/>\n            </p>\n        {:else}\n            <Alert color=\"warning\">No outcomes found for this bank.</Alert>\n        {/if}\n        <slot/>\n    </Container>\n</main>\n\n<style>\n    h1 {margin-top: 0.5em;}\n</style>"
  ],
  "names": [],
  "mappings": "AA0CI,EAAE,cAAC,CAAC,AAAC,UAAU,CAAE,GAAG,AAAE,CAAC;ACgCvB,GAAG,cAAC,CAAC,AACD,MAAM,CAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,GAAG,AACtB,CAAC,AACD,QAAQ,cAAC,CAAC,AACN,aAAa,CAAE,GAAG,AACtB,CAAC;ACzBD,WAAW,cAAC,CAAC,AACT,UAAU,CAAE,MAAM,AACtB,CAAC;AC5BD,EAAE,cAAC,CAAC,UAAU,CAAE,KAAK,AAAC,CAAC"
}